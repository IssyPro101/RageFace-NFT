{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/NFTAirdrop/client/src/Main.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.componentDidMount = async () => {};\n\n    this.buyNft = async (tokenId, tokenPrice) => {\n      await this.props.airdropInstance.methods.buyNft(tokenId).send({\n        from: this.props.account,\n        value: tokenPrice\n      });\n    };\n  }\n\n  render() {\n    if (this.props.nftsS === \"0\") {\n      return React.createElement(\"p\", {\n        id: \"no-nfts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"No NFTs up for sale yet.\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Sale\"), React.createElement(\"p\", {\n        class: \"nft-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, this.props.nftsS, \" has been listed for sale\"), React.createElement(\"div\", {\n        class: \"nfts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, this.props.nfts.map((nft, key) => {\n        if (nft.purpose == 1) {\n          return React.createElement(\"div\", {\n            class: \"nft\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }, React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            },\n            __self: this\n          }, nft.title), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          }, \"Id: #\", nft.id), React.createElement(\"img\", {\n            class: \"ipfs-image\",\n            src: \"https://ipfs.infura.io/ipfs/\".concat(nft.image),\n            alt: \"IPFS Upload\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            class: \"nft-info\",\n            id: \"desc\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35\n            },\n            __self: this\n          }, nft.description), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            },\n            __self: this\n          }, \"Price: \", nft.price, \" ether\"), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37\n            },\n            __self: this\n          }, \"Status: \", nft.status == 0 ? \"Unbought\" : \"Bought\"), nft.status == 0 ? React.createElement(\"button\", {\n            onClick: () => this.buyNft(nft.id, nft.price),\n            class: \"purchase\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }, \"Buy\") : React.createElement(\"button\", {\n            class: \"purchase\",\n            disabled: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }, \"Buy\"));\n        }\n      })));\n    }\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/NFTAirdrop/client/src/Main.js"],"names":["React","Component","Main","state","componentDidMount","buyNft","tokenId","tokenPrice","props","airdropInstance","methods","send","from","account","value","render","nftsS","nfts","map","nft","key","purpose","title","id","image","description","price","status"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\n\nclass Main extends Component {\n\n  state = {  };\n\n  componentDidMount = async () => {\n  };\n\n  buyNft = async (tokenId, tokenPrice) => {\n    await this.props.airdropInstance.methods.buyNft(tokenId).send({from: this.props.account, value: tokenPrice});\n  }\n\n  render() {\n    if (this.props.nftsS === \"0\") {\n      return(\n        <p id=\"no-nfts\">No NFTs up for sale yet.</p>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <h1>Sale</h1>\n          <p class=\"nft-info\">{this.props.nftsS} has been listed for sale</p>\n          <div class=\"nfts\">\n            {this.props.nfts.map((nft, key) => {\n              if (nft.purpose == 1) {\n                return (\n                  <div class=\"nft\">\n                    <h2>{nft.title}</h2>\n                    <p class=\"nft-info\">Id: #{nft.id}</p>\n                    <img class=\"ipfs-image\" src={`https://ipfs.infura.io/ipfs/${nft.image}`} alt=\"IPFS Upload\"/>\n                    <p class=\"nft-info\" id=\"desc\">{nft.description}</p>\n                    <p class=\"nft-info\">Price: {nft.price} ether</p>\n                    <p class=\"nft-info\">Status: {nft.status == 0 ? \"Unbought\" : \"Bought\"}</p>\n                    {nft.status == 0 ? <button onClick={() => this.buyNft(nft.id, nft.price)} class=\"purchase\">Buy</button> : <button class=\"purchase\" disabled>Buy</button>}\n                  </div>\n                );\n              }\n            })}\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}