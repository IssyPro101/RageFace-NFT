{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/Product DApp/client/src/ListProducts.js\";\nimport React, { Component } from 'react';\nimport ProductBuyContract from \"./contracts/ProductBuy.json\";\nimport TestToken from \"./contracts/TestToken.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst BigNumber = require('bignumber.js');\n\nclass ListProducts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: null,\n      web3: null,\n      account: \"\",\n      contract: null,\n      token: null,\n      tokenName: null,\n      approved: false,\n      product: null,\n      statuses: null,\n      taxTolerance: null,\n      priceWithTax: \"0\",\n      decimals: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        const account = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        console.log(account[0]); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetworkProduct = ProductBuyContract.networks[networkId];\n        const instance = new web3.eth.Contract(ProductBuyContract.abi, deployedNetworkProduct && deployedNetworkProduct.address);\n        let tokenAddress = await instance.methods.token().call();\n        const deployedNetworkToken = TestToken.networks[networkId];\n        const token = new web3.eth.Contract(TestToken.abi, deployedNetworkToken && tokenAddress);\n        let product = deployedNetworkProduct.address;\n        let products = await instance.methods.viewProducts().call();\n        let tokenName = await token.methods.name().call();\n        let tokenSymbol = await token.methods.symbol().call();\n        let taxTolerance = await instance.methods.taxTolerance().call();\n        let decimals = await token.methods.decimals().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          account: account[0],\n          contract: instance,\n          products,\n          token,\n          tokenName,\n          tokenSymbol,\n          product,\n          taxTolerance,\n          decimals\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      let name = document.getElementsByName(\"field1\")[0].value;\n      let link = document.getElementsByName(\"field2\")[0].value;\n      let price = document.getElementsByName(\"field3\")[0].value;\n      let ten = new BigNumber(10);\n      let dec = new BigNumber(this.state.decimals);\n      let wei = ten.pow(dec).toString();\n      let bnPrice = new BigNumber(price).times(wei);\n      console.log(bnPrice);\n      await this.state.contract.methods.listProduct(name, link, bnPrice.toString()).send({\n        from: this.state.account\n      });\n    };\n\n    this.handlePrice = async event => {\n      if (this.state.taxTolerance !== \"0\") {\n        let priceWithTax = document.getElementsByName(\"field3\")[0].value * (100 - this.state.taxTolerance) / 100;\n        this.setState({\n          priceWithTax\n        });\n      } else {\n        this.setState({\n          priceWithTax: document.getElementsByName(\"field3\")[0].value\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"List a Product\"), React.createElement(\"div\", {\n      class: \"form-style-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Product Details\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"field1\",\n      placeholder: \"Product Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"field2\",\n      placeholder: \"Product Link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onChange: this.handlePrice,\n      type: \"text\",\n      name: \"field3\",\n      placeholder: \"Product Price in \" + this.state.tokenName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"You will receive \", this.state.priceWithTax, \" \", this.state.tokenSymbol, \" (\", this.state.taxTolerance + \"% tax on \" + this.state.tokenName + \" transfer\", \")\"), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"List\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default ListProducts;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/Product DApp/client/src/ListProducts.js"],"names":["React","Component","ProductBuyContract","TestToken","getWeb3","BigNumber","require","ListProducts","state","products","web3","account","contract","token","tokenName","approved","product","statuses","taxTolerance","priceWithTax","decimals","componentDidMount","window","ethereum","request","method","console","log","networkId","eth","net","getId","deployedNetworkProduct","networks","instance","Contract","abi","address","tokenAddress","methods","call","deployedNetworkToken","viewProducts","name","tokenSymbol","symbol","setState","error","alert","handleSubmit","event","preventDefault","document","getElementsByName","value","link","price","ten","dec","wei","pow","toString","bnPrice","times","listProduct","send","from","handlePrice","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ProductBuyContract from \"./contracts/ProductBuy.json\";\nimport TestToken from \"./contracts/TestToken.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst BigNumber = require('bignumber.js');\n\nclass ListProducts extends Component {\n\n    state = {products: null, web3: null, account: \"\", contract: null, token: null, tokenName: null, approved: false, product: null, statuses: null, taxTolerance: null, priceWithTax: \"0\", decimals: null }\n\n    componentDidMount = async () => {\n        try {\n          // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n\n            const account = await window.ethereum.request({ method: 'eth_accounts' });\n            console.log(account[0])\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n            const deployedNetworkProduct = ProductBuyContract.networks[networkId];\n            const instance = new web3.eth.Contract(\n                ProductBuyContract.abi,\n                deployedNetworkProduct && deployedNetworkProduct.address,\n            );\n\n            let tokenAddress = await instance.methods.token().call();\n\n            const deployedNetworkToken = TestToken.networks[networkId];\n            const token = new web3.eth.Contract(\n                TestToken.abi,\n                deployedNetworkToken && tokenAddress,\n            );\n\n            let product = deployedNetworkProduct.address;\n\n            let products = await instance.methods.viewProducts().call();\n\n            let tokenName = await token.methods.name().call();\n\n            let tokenSymbol = await token.methods.symbol().call();\n\n            let taxTolerance = await instance.methods.taxTolerance().call();\n\n            let decimals = await token.methods.decimals().call();\n\n\n          // Set web3, accounts, and contract to the state, and then proceed with an\n          // example of interacting with the contract's methods.\n          this.setState({web3, account: account[0], contract: instance, products, token, tokenName, tokenSymbol, product, taxTolerance, decimals });\n    \n        } catch (error) {\n          // Catch any errors for any of the above operations.\n          alert(\n            `Failed to load web3, accounts, or contract. Check console for details.`,\n          );\n          console.error(error);\n        }\n    };    \n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        let name = document.getElementsByName(\"field1\")[0].value;\n        let link = document.getElementsByName(\"field2\")[0].value;\n        let price = document.getElementsByName(\"field3\")[0].value;\n\n        let ten = new BigNumber(10);\n        let dec = new BigNumber(this.state.decimals);\n        let wei = ten.pow(dec).toString()\n\n        let bnPrice = new BigNumber(price).times(wei);\n        console.log(bnPrice)\n\n        await this.state.contract.methods.listProduct(name, link, bnPrice.toString()).send({from: this.state.account});\n    }\n\n    handlePrice = async (event) => {\n        if (this.state.taxTolerance !== \"0\") {\n            let priceWithTax = document.getElementsByName(\"field3\")[0].value * (100 - this.state.taxTolerance) / 100;\n            this.setState({priceWithTax})\n        } else {\n            this.setState({priceWithTax: document.getElementsByName(\"field3\")[0].value})\n        }\n\n    }\n\n\n  render() {\n    return (\n        <div className=\"App\">\n            <h1>List a Product</h1>\n            <div class=\"form-style-6\">\n                <h1>Product Details</h1>\n                <form>\n                    <input type=\"text\" name=\"field1\" placeholder=\"Product Name\" />\n                    <input type=\"text\" name=\"field2\" placeholder=\"Product Link\" />\n                    <input onChange={this.handlePrice} type=\"text\" name=\"field3\" placeholder={\"Product Price in \" + this.state.tokenName}></input>\n                    <p>You will receive {this.state.priceWithTax} {this.state.tokenSymbol} ({this.state.taxTolerance + \"% tax on \" + this.state.tokenName + \" transfer\"})</p>\n                    <input type=\"submit\" value=\"List\" onClick={this.handleSubmit} />\n\n                </form>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default ListProducts;\n"]},"metadata":{},"sourceType":"module"}