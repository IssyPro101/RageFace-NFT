{"ast":null,"code":"'use strict';\n\nconst _require = require('multiaddr'),\n      Multiaddr = _require.Multiaddr;\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function* query(peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.responses = (message.responses || []).map((\n      /** @type {{ ID: string, Addrs: string[] }} */\n      {\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        addrs: (Addrs || []).map(\n        /** @type {string} **/\n        a => new Multiaddr(a))\n      }));\n      yield message;\n    }\n  }\n\n  return query;\n});","map":null,"metadata":{},"sourceType":"script"}