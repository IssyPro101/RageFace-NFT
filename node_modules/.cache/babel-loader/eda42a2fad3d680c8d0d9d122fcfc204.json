{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/NFTAirdrop/client/src/App.js\";\nimport React from \"../node_modules/react\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport Airdrop from \"./Airdrop\";\nimport Navbar from \"./Navbar\";\nimport NFTAirdrop from \"./contracts/NFTAirdrop.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n/**\n * @App Build Decentralized Art Market using ERC-721\n * @Util initail App build main class\n * @Book Learn Ethereum\n * @author brian wu\n */\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      account: \"dawdwa\",\n      networkId: null,\n      airdropInstance: null,\n      ipfs: null,\n      nfts: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        let account = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        account = account[0]; // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetworkAirdrop = NFTAirdrop.networks[networkId];\n        const airdropInstance = new web3.eth.Contract(NFTAirdrop.abi, deployedNetworkAirdrop && deployedNetworkAirdrop.address);\n        let nfts = await airdropInstance.methods.allNfts().call();\n        console.log(nfts);\n        this.setState({\n          web3,\n          account,\n          networkId,\n          airdropInstance,\n          ipfs,\n          nfts\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Please connect your metamask and switch to the binance test chain\");\n        console.error(error);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      account: this.state.account,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Main, {\n      web3: this.state.web3,\n      account: this.state.account,\n      networkId: this.state.networkdId,\n      airdropInstance: this.state.airdropInstance,\n      ipfs: this.state.ipfs,\n      nfts: this.state.nfts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/airdrop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Airdrop, {\n      web3: this.state.web3,\n      account: this.state.account,\n      networkId: this.state.networkdId,\n      airdropInstance: this.state.airdropInstance,\n      ipfs: this.state.ipfs,\n      nfts: this.state.nfts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/NFTAirdrop/client/src/App.js"],"names":["React","Main","Airdrop","Navbar","NFTAirdrop","getWeb3","BrowserRouter","Router","Switch","Route","ipfsClient","require","ipfs","host","port","protocol","App","Component","state","web3","account","networkId","airdropInstance","nfts","componentDidMount","window","ethereum","request","method","eth","net","getId","deployedNetworkAirdrop","networks","Contract","abi","address","methods","allNfts","call","console","log","setState","error","alert","render","networkdId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,uBAAlB;AACA,OAAO,WAAP;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA;;;;;;;AAMA,MAAMC,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAMC,IAAI,GAAGF,UAAU,CAAC;AAAEG,EAAAA,IAAI,EAAE,gBAAR;AAA0BC,EAAAA,IAAI,EAAE,IAAhC;AAAsCC,EAAAA,QAAQ,EAAE;AAAhD,CAAD,CAAvB,C,CAAmF;;AAEnF,MAAMC,GAAN,SAAkBhB,KAAK,CAACiB,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,OAAO,EAAE,QAAvB;AAAiCC,MAAAA,SAAS,EAAE,IAA5C;AAAkDC,MAAAA,eAAe,EAAE,IAAnE;AAAyEV,MAAAA,IAAI,EAAE,IAA/E;AAAqFW,MAAAA,IAAI,EAAE;AAA3F,KAFwB;;AAAA,SAIhCC,iBAJgC,GAIZ,YAAY;AAC9B,UAAI;AACF;AACA,cAAML,IAAI,GAAG,MAAMd,OAAO,EAA1B,CAFE,CAIF;;AACA,YAAIe,OAAO,GAAG,MAAMK,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAxB,CAApB;AACAR,QAAAA,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB,CANE,CAQF;;AACA,cAAMC,SAAS,GAAG,MAAMF,IAAI,CAACU,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,sBAAsB,GAAG5B,UAAU,CAAC6B,QAAX,CAAoBZ,SAApB,CAA/B;AACA,cAAMC,eAAe,GAAG,IAAIH,IAAI,CAACU,GAAL,CAASK,QAAb,CACtB9B,UAAU,CAAC+B,GADW,EAEtBH,sBAAsB,IAAIA,sBAAsB,CAACI,OAF3B,CAAxB;AAKA,YAAIb,IAAI,GAAG,MAAMD,eAAe,CAACe,OAAhB,CAAwBC,OAAxB,GAAkCC,IAAlC,EAAjB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AAEA,aAAKmB,QAAL,CAAc;AAACvB,UAAAA,IAAD;AAAOC,UAAAA,OAAP;AAAgBC,UAAAA,SAAhB;AAA2BC,UAAAA,eAA3B;AAA4CV,UAAAA,IAA5C;AAAkDW,UAAAA;AAAlD,SAAd;AAED,OArBD,CAqBE,OAAOoB,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,qEAAL;AAGAJ,QAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AAED;AACF,KAlC+B;AAAA;;AAoChCE,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAK3B,KAAL,CAAWE,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,IAAvB;AAA6B,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,OAAjD;AAA0D,MAAA,SAAS,EAAE,KAAKF,KAAL,CAAW4B,UAAhF;AAA4F,MAAA,eAAe,EAAE,KAAK5B,KAAL,CAAWI,eAAxH;AAAyI,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWN,IAA1J;AAAgK,MAAA,IAAI,EAAE,KAAKM,KAAL,CAAWK,IAAjL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFF,EAKE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWC,IAA1B;AAAgC,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,OAApD;AAA6D,MAAA,SAAS,EAAE,KAAKF,KAAL,CAAW4B,UAAnF;AAA+F,MAAA,eAAe,EAAE,KAAK5B,KAAL,CAAWI,eAA3H;AAA4I,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWN,IAA7J;AAAmK,MAAA,IAAI,EAAE,KAAKM,KAAL,CAAWK,IAApL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CALF,CADF,CADF,CADF;AAeD;;AApD+B;;AAsDlC,eAAeP,GAAf","sourcesContent":["import React from \"../node_modules/react\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport Airdrop from \"./Airdrop\";\nimport Navbar from \"./Navbar\";\nimport NFTAirdrop from \"./contracts/NFTAirdrop.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n/**\n * @App Build Decentralized Art Market using ERC-721\n * @Util initail App build main class\n * @Book Learn Ethereum\n * @author brian wu\n */\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends React.Component {\n\n  state = { web3: null, account: \"dawdwa\", networkId: null, airdropInstance: null, ipfs: null, nfts: null }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      let account = await window.ethereum.request({ method: 'eth_accounts' });\n      account = account[0];\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetworkAirdrop = NFTAirdrop.networks[networkId];\n      const airdropInstance = new web3.eth.Contract(\n        NFTAirdrop.abi,\n        deployedNetworkAirdrop && deployedNetworkAirdrop.address,\n      );\n\n      let nfts = await airdropInstance.methods.allNfts().call();\n      console.log(nfts)\n\n      this.setState({web3, account, networkId, airdropInstance, ipfs, nfts})\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Please connect your metamask and switch to the binance test chain`,\n      );\n      console.error(error)\n\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <div>\n            <Navbar account={this.state.account}/>\n            <Route exact path='/'>\n                <Main web3={this.state.web3} account={this.state.account} networkId={this.state.networkdId} airdropInstance={this.state.airdropInstance} ipfs={this.state.ipfs} nfts={this.state.nfts}/>\n            </Route>\n            <Route exact path='/airdrop'>\n                <Airdrop web3={this.state.web3} account={this.state.account} networkId={this.state.networkdId} airdropInstance={this.state.airdropInstance} ipfs={this.state.ipfs} nfts={this.state.nfts}/>\n            </Route>\n          </div>\n        </Switch>\n      </Router>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}