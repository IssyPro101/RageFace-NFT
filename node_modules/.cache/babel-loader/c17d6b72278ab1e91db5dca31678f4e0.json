{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst _require = require('native-abort-controller'),\n      AbortController = _require.AbortController;\n\nconst _require2 = require('multiformats/cid'),\n      CID = _require2.CID;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function* dagImport(source, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n\n    const _ref = await multipartRequest(source, controller, options.headers),\n          headers = _ref.headers,\n          body = _ref.body;\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({\n        'pin-roots': options.pinRoots\n      })\n    });\n\n    for await (const _ref2 of res.ndjson()) {\n      const Root = _ref2.Root;\n\n      if (Root !== undefined) {\n        const Cid = Root.Cid['/'],\n              PinErrorMsg = Root.PinErrorMsg;\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n\n  return dagImport;\n});","map":null,"metadata":{},"sourceType":"script"}