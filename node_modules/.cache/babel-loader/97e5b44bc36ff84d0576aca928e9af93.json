{"ast":null,"code":"'use strict';\n\nconst _require = require('multiformats/cid'),\n      CID = _require.CID;\n\nconst configure = require('../lib/configure');\n\nconst _require2 = require('ipfs-core-utils/src/pins/normalise-input'),\n      normaliseInput = _require2.normaliseInput;\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function* rmAll(source, options = {}) {\n    for await (const _ref of normaliseInput(source)) {\n      const path = _ref.path;\n      const recursive = _ref.recursive;\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', \"\".concat(path));\n      if (recursive != null) searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: \"\".concat(path),\n          recursive\n        })\n      });\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          // non-streaming response\n          yield* pin.Pins.map(\n          /** @type {string} */\n          cid => CID.parse(cid));\n          continue;\n        }\n\n        yield CID.parse(pin);\n      }\n    }\n  }\n\n  return rmAll;\n});","map":null,"metadata":{},"sourceType":"script"}