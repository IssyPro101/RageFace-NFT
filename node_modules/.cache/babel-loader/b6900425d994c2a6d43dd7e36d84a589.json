{"ast":null,"code":"'use strict';\n\nconst _require = require('multiformats/cid'),\n      CID = _require.CID;\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst _require2 = require('native-abort-controller'),\n      AbortController = _require2.AbortController;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put(data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    let res;\n\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(await multipartRequest(data, controller, options.headers))\n      });\n      res = await response.json();\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options,\n          format: 'cbor'\n        });\n      }\n\n      throw err;\n    }\n\n    return CID.parse(res.Key);\n  }\n\n  return put;\n});","map":null,"metadata":{},"sourceType":"script"}