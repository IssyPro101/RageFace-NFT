{"ast":null,"code":"'use strict';\n\nconst _require = require('multiformats/cid'),\n      CID = _require.CID;\n\nconst multipartRequest = require('../../lib/multipart-request');\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\nconst abortSignal = require('../../lib/abort-signal');\n\nconst _require2 = require('native-abort-controller'),\n      AbortController = _require2.AbortController;\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData(cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\"\".concat(cid)],\n        ...options\n      }),\n      ...(await multipartRequest(data, controller, options.headers))\n    });\n\n    const _ref = await res.json(),\n          Hash = _ref.Hash;\n\n    return CID.parse(Hash);\n  }\n\n  return setData;\n});","map":null,"metadata":{},"sourceType":"script"}