{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/NFTAirdrop/client/src/MyNFTs.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass MyNFTs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.componentDidMount = async () => {};\n\n    this.claimNFTBought = async tokenId => {\n      await this.props.airdropInstance.methods.claimNFTBought(tokenId).send({\n        from: this.props.account\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"My NFTs\"), React.createElement(\"p\", {\n      class: \"nft-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"You can claim these at the end of the presale which is: \", this.props.airdropEnd), React.createElement(\"div\", {\n      class: \"nfts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, this.props.nfts.map((nft, key) => {\n      if (nft.owner.toLowerCase() == this.props.account.toLowerCase()) {\n        if (nft.purpose == \"1\") {\n          return React.createElement(\"div\", {\n            class: \"nft\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            class: \"white-box\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 27\n            },\n            __self: this\n          }, React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28\n            },\n            __self: this\n          }, nft.title), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          }, \"Can claim at end of sale\"), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30\n            },\n            __self: this\n          }, \"Id: #\", nft.id), React.createElement(\"img\", {\n            class: \"ipfs-image\",\n            src: \"https://ipfs.infura.io/ipfs/\".concat(nft.image),\n            alt: \"IPFS Upload\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            class: \"nft-info\",\n            id: \"desc\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            },\n            __self: this\n          }, nft.description), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          }, \"Price: \", nft.price / 10 ** 18, \" ether\"), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }, nft.claimed == 1 ? React.createElement(\"button\", {\n            class: \"purchase\",\n            disabled: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }, \"Claim\") : React.createElement(\"button\", {\n            class: \"purchase\",\n            onClick: () => this.claimNFTBought(nft.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }, \"Claim\"))));\n        } else {\n          return React.createElement(\"div\", {\n            class: \"nft\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40\n            },\n            __self: this\n          }, React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          }, nft.title), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }, \"Received from Airdrop\"), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          }, \"Id: #\", nft.id), React.createElement(\"img\", {\n            id: \"ipfs-image\",\n            src: \"https://ipfs.infura.io/ipfs/\".concat(nft.image),\n            alt: \"IPFS Upload\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            class: \"nft-info\",\n            id: \"desc\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, nft.description), React.createElement(\"p\", {\n            class: \"nft-info\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, \"Price: \", nft.price / 10 ** 18, \" ether\"), React.createElement(\"button\", {\n            class: \"purchase-disabled\",\n            disabled: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }, \"Claimed\"));\n        }\n      }\n    })));\n  }\n\n}\n\nexport default MyNFTs;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/NFTAirdrop/client/src/MyNFTs.js"],"names":["React","Component","MyNFTs","state","componentDidMount","claimNFTBought","tokenId","props","airdropInstance","methods","send","from","account","render","airdropEnd","nfts","map","nft","key","owner","toLowerCase","purpose","title","id","image","description","price","claimed"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\n\nclass MyNFTs extends Component {\n\n  state = {  };\n\n  componentDidMount = async () => {\n  };\n\n  claimNFTBought = async (tokenId) => {\n    await this.props.airdropInstance.methods.claimNFTBought(tokenId).send({from: this.props.account});\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n        <h1>My NFTs</h1>\n        <p class=\"nft-info\">You can claim these at the end of the presale which is: {this.props.airdropEnd}</p>\n        <div class=\"nfts\">\n          {this.props.nfts.map((nft, key) => {\n              if (nft.owner.toLowerCase() == this.props.account.toLowerCase()) {\n                if (nft.purpose == \"1\") {\n                    return (\n                        <div class=\"nft\">\n                          <div class=\"white-box\">\n                          <h2>{nft.title}</h2>\n                          <p class=\"nft-info\">Can claim at end of sale</p>\n                          <p class=\"nft-info\">Id: #{nft.id}</p>\n                          <img class=\"ipfs-image\" src={`https://ipfs.infura.io/ipfs/${nft.image}`} alt=\"IPFS Upload\"/>\n                          <p class=\"nft-info\" id=\"desc\">{nft.description}</p>\n                          <p class=\"nft-info\">Price: {nft.price/10**18} ether</p>\n                          <p class=\"nft-info\">{nft.claimed == 1 ? <button class=\"purchase\" disabled>Claim</button> : <button class=\"purchase\" onClick={() => this.claimNFTBought(nft.id)}>Claim</button>}</p>\n                          </div>\n                        </div>\n                      );\n                } else {\n                    return (\n                        <div class=\"nft\">\n                          <h2>{nft.title}</h2>\n                          <p class=\"nft-info\">Received from Airdrop</p>\n                          <p class=\"nft-info\">Id: #{nft.id}</p>\n                          <img id=\"ipfs-image\" src={`https://ipfs.infura.io/ipfs/${nft.image}`} alt=\"IPFS Upload\"/>\n                          <p class=\"nft-info\" id=\"desc\">{nft.description}</p>\n                          <p class=\"nft-info\">Price: {nft.price/10**18} ether</p>\n                          <button class=\"purchase-disabled\" disabled>Claimed</button>\n                        </div>\n                      );                    \n                }\n\n              }\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MyNFTs;\n"]},"metadata":{},"sourceType":"module"}