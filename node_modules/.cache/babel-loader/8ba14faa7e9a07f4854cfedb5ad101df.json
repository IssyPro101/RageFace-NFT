{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/Product DApp/client/src/App.js\";\nimport React from \"../node_modules/react\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport Navbar from \"./Navbar\";\nimport MyProducts from \"./MyProducts\";\nimport ListProducts from \"./ListProducts\";\nimport ProductBuyContract from \"./contracts/ProductBuy.json\";\nimport TestToken from \"./contracts/TestToken.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n/**\n * @App Build Decentralized Art Market using ERC-721\n * @Util initail App build main class\n * @Book Learn Ethereum\n * @author brian wu\n */\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      account: \"\"\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const account = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        console.log(account[0]); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetworkProduct = ProductBuyContract.networks[networkId];\n        const instance = new web3.eth.Contract(ProductBuyContract.abi, deployedNetworkProduct && deployedNetworkProduct.address);\n        let tokenAddress = await instance.methods.token().call();\n        const deployedNetworkToken = TestToken.networks[networkId];\n        const token = new web3.eth.Contract(TestToken.abi, deployedNetworkToken && tokenAddress);\n        let product = deployedNetworkProduct.address;\n        let products = await instance.methods.getBoughtProducts().call({\n          from: account[0]\n        });\n        console.log(products);\n        let tokenName = await token.methods.name().call();\n        let tokenSymbol = await token.methods.symbol().call();\n        let decimals = await token.methods.decimals().call();\n        let taxTolerance = await instance.methods.taxTolerance().call();\n        this.setState({\n          web3,\n          account: account[0],\n          contract: instance,\n          products,\n          token,\n          tokenName,\n          tokenSymbol,\n          product,\n          taxTolerance,\n          decimals\n        });\n        console.log(this.state.products);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Please connect your metamask and switch to the binance test chain\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      account: this.state.account,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Main, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Main, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/list-products\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(ListProducts, {\n      web3: this.state.web3,\n      account: this.state.account,\n      contract: this.state.contract,\n      products: this.state.products,\n      token: this.state.token,\n      tokenName: this.state.tokenName,\n      tokenSymbol: this.state.tokenSymbol,\n      product: this.state.product,\n      taxTolerance: this.state.taxTolerance,\n      decimals: this.state.decimals,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/my-products\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(MyProducts, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/Product DApp/client/src/App.js"],"names":["React","Main","Navbar","MyProducts","ListProducts","ProductBuyContract","TestToken","getWeb3","BrowserRouter","Router","Switch","Route","App","Component","state","account","componentDidMount","web3","window","ethereum","request","method","console","log","networkId","eth","net","getId","deployedNetworkProduct","networks","instance","Contract","abi","address","tokenAddress","methods","token","call","deployedNetworkToken","product","products","getBoughtProducts","from","tokenName","name","tokenSymbol","symbol","decimals","taxTolerance","setState","contract","error","alert","render"],"mappings":"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","sourcesContent":["import React from \"../node_modules/react\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport Navbar from \"./Navbar\";\nimport MyProducts from \"./MyProducts\";\nimport ListProducts from \"./ListProducts\";\nimport ProductBuyContract from \"./contracts/ProductBuy.json\";\nimport TestToken from \"./contracts/TestToken.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n/**\n * @App Build Decentralized Art Market using ERC-721\n * @Util initail App build main class\n * @Book Learn Ethereum\n * @author brian wu\n */\nclass App extends React.Component {\n\n  state = { account: \"\" }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const account = await window.ethereum.request({ method: 'eth_accounts' });\n      console.log(account[0])\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetworkProduct = ProductBuyContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ProductBuyContract.abi,\n        deployedNetworkProduct && deployedNetworkProduct.address,\n      );\n\n      let tokenAddress = await instance.methods.token().call();\n\n      const deployedNetworkToken = TestToken.networks[networkId];\n      const token = new web3.eth.Contract(\n        TestToken.abi,\n        deployedNetworkToken && tokenAddress,\n      );\n\n      let product = deployedNetworkProduct.address;\n\n      let products = await instance.methods.getBoughtProducts().call({from: account[0]});\n      console.log(products)\n\n      let tokenName = await token.methods.name().call();\n\n      let tokenSymbol = await token.methods.symbol().call();\n\n      let decimals = await token.methods.decimals().call();\n\n      let taxTolerance = await instance.methods.taxTolerance().call();\n\n      this.setState({web3, account: account[0], contract: instance, products, token, tokenName, tokenSymbol, product, taxTolerance, decimals});\n      console.log(this.state.products)\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Please connect your metamask and switch to the binance test chain`,\n      );\n\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <div>\n            <Navbar account={this.state.account}/>\n            <Route exact path='/'>\n                <Main />\n            </Route>\n            <Route exact path='/home'>\n                <Main />\n            </Route>\n            <Route exact path='/list-products'>\n                <ListProducts web3={this.state.web3} account={this.state.account} contract={this.state.contract} products={this.state.products} token={this.state.token} tokenName={this.state.tokenName} tokenSymbol={this.state.tokenSymbol} product={this.state.product} taxTolerance={this.state.taxTolerance} decimals={this.state.decimals} />\n            </Route>\n            <Route exact path='/my-products'>\n                <MyProducts />\n            </Route>\n          </div>\n        </Switch>\n      </Router>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}