{"ast":null,"code":"'use strict';\n\nconst _require = require('multiaddr'),\n      Multiaddr = _require.Multiaddr;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst _require2 = require('./response-types'),\n      FinalPeer = _require2.FinalPeer;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function findPeer(peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const _data$Responses$ = data.Responses[0],\n              ID = _data$Responses$.ID,\n              Addrs = _data$Responses$.Addrs;\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(\n          /** @type {string} **/\n          a => new Multiaddr(a))\n        };\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return findPeer;\n});","map":null,"metadata":{},"sourceType":"script"}