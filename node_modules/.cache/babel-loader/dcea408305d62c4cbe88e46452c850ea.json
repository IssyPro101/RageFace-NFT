{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst _require = require('./response-types'),\n      Value = _require.Value;\n\nconst _require2 = require('uint8arrays/from-string'),\n      uint8ArrayFromString = _require2.fromString;\n\nconst _require3 = require('uint8arrays/to-string'),\n      uint8ArrayToString = _require3.toString;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function get(key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad');\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return get;\n});","map":null,"metadata":{},"sourceType":"script"}