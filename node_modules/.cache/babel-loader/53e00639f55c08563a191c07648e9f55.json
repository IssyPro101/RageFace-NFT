{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/NFTAirdrop/client/src/App.js\";\nimport React from \"../node_modules/react\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport Airdrop from \"./Airdrop\";\nimport Navbar from \"./Navbar\";\nimport MyNFTs from \"./MyNFTs\";\nimport NFTAirdrop from \"./contracts/NFTAirdrop.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n/**\n * @App Build Decentralized Art Market using ERC-721\n * @Util initail App build main class\n * @Book Learn Ethereum\n * @author brian wu\n */\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      account: \"\",\n      networkId: null,\n      airdropInstance: null,\n      ipfs: null,\n      nfts: [],\n      airdropEnd: null,\n      nftsA: null,\n      nftsS: null,\n      loading: true\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        let account = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        account = account[0]; // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetworkAirdrop = NFTAirdrop.networks[networkId];\n        const airdropInstance = new web3.eth.Contract(NFTAirdrop.abi, deployedNetworkAirdrop && deployedNetworkAirdrop.address);\n        let nftsA = await airdropInstance.methods.nftsAirdrop().call();\n        let nftsS = await airdropInstance.methods.nftsSale().call();\n        const price = await airdropInstance.methods.price().call();\n        let airdropEnd = await airdropInstance.methods.airdropEnd().call();\n        let airdropStart = await airdropInstance.methods.airdropStart().call();\n        const millisecondsEnd = airdropEnd * 1000;\n        const dateObjectEnd = new Date(millisecondsEnd);\n        const millisecondsStart = airdropStart * 1000;\n        const dateObjectStart = new Date(millisecondsStart);\n        airdropStart = dateObjectStart.toUTCString();\n        airdropEnd = dateObjectEnd.toUTCString();\n        let nfts = await airdropInstance.methods.allNfts().call();\n        let maxAirdrop = await airdropInstance.methods.MAX_AIRDROP_TOKENS().call();\n        let maxSale = await airdropInstance.methods.MAX_SALE_TOKENS().call();\n        this.setState({\n          web3,\n          account,\n          networkId,\n          airdropInstance,\n          ipfs,\n          nfts,\n          airdropEnd,\n          airdropStart,\n          nftsA,\n          nftsS,\n          exampleNfts,\n          price,\n          loading: false\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Please connect to the right chain.\");\n        console.error(error);\n      }\n    };\n  }\n\n  render() {\n    if (!this.state.loading) {\n      return React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Main, {\n        web3: this.state.web3,\n        account: this.state.account,\n        networkId: this.state.networkdId,\n        airdropInstance: this.state.airdropInstance,\n        ipfs: this.state.ipfs,\n        nfts: this.state.nfts,\n        airdropEnd: this.state.airdropEnd,\n        airdropStart: this.state.airdropStart,\n        nftsA: this.state.nftsA,\n        nftsS: this.state.nftsS,\n        price: this.state.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })), React.createElement(Route, {\n        exact: true,\n        path: \"/airdrop\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Airdrop, {\n        web3: this.state.web3,\n        account: this.state.account,\n        networkId: this.state.networkdId,\n        airdropInstance: this.state.airdropInstance,\n        ipfs: this.state.ipfs,\n        nfts: this.state.nfts,\n        airdropEnd: this.state.airdropEnd,\n        airdropStart: this.state.airdropStart,\n        nftsA: this.state.nftsA,\n        nftsS: this.state.nftsS,\n        price: this.state.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(Route, {\n        exact: true,\n        path: \"/mynfts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(MyNFTs, {\n        web3: this.state.web3,\n        account: this.state.account,\n        networkId: this.state.networkdId,\n        airdropInstance: this.state.airdropInstance,\n        ipfs: this.state.ipfs,\n        nfts: this.state.nfts,\n        airdropEnd: this.state.airdropEnd,\n        airdropStart: this.state.airdropStart,\n        nftsA: this.state.nftsA,\n        nftsS: this.state.nftsS,\n        price: this.state.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      })))));\n    } else {\n      return React.createElement(\"div\", {\n        class: \"loader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/NFTAirdrop/client/src/App.js"],"names":["React","Main","Airdrop","Navbar","MyNFTs","NFTAirdrop","getWeb3","BrowserRouter","Router","Switch","Route","ipfsClient","require","ipfs","host","port","protocol","App","Component","state","web3","account","networkId","airdropInstance","nfts","airdropEnd","nftsA","nftsS","loading","componentDidMount","window","ethereum","request","method","eth","net","getId","deployedNetworkAirdrop","networks","Contract","abi","address","methods","nftsAirdrop","call","nftsSale","price","airdropStart","millisecondsEnd","dateObjectEnd","Date","millisecondsStart","dateObjectStart","toUTCString","allNfts","maxAirdrop","MAX_AIRDROP_TOKENS","maxSale","MAX_SALE_TOKENS","setState","exampleNfts","error","alert","console","render","networkdId"],"mappings":"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","sourcesContent":["import React from \"../node_modules/react\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport Airdrop from \"./Airdrop\";\nimport Navbar from \"./Navbar\";\nimport MyNFTs from \"./MyNFTs\";\nimport NFTAirdrop from \"./contracts/NFTAirdrop.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n/**\n * @App Build Decentralized Art Market using ERC-721\n * @Util initail App build main class\n * @Book Learn Ethereum\n * @author brian wu\n */\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends React.Component {\n\n  state = { web3: null, account: \"\", networkId: null, airdropInstance: null, ipfs: null, nfts: [], airdropEnd: null, nftsA: null, nftsS: null, loading:true }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      let account = await window.ethereum.request({ method: 'eth_accounts' });\n      account = account[0];\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetworkAirdrop = NFTAirdrop.networks[networkId];\n      const airdropInstance = new web3.eth.Contract(\n        NFTAirdrop.abi,\n        deployedNetworkAirdrop && deployedNetworkAirdrop.address,\n      );\n\n      let nftsA = await airdropInstance.methods.nftsAirdrop().call();\n      let nftsS = await airdropInstance.methods.nftsSale().call();\n      const price = await airdropInstance.methods.price().call()\n\n      let airdropEnd = await airdropInstance.methods.airdropEnd().call();\n      let airdropStart = await airdropInstance.methods.airdropStart().call();\n\n      const millisecondsEnd = airdropEnd * 1000\n\n      const dateObjectEnd = new Date(millisecondsEnd)\n\n      const millisecondsStart = airdropStart * 1000\n\n      const dateObjectStart = new Date(millisecondsStart)\n\n      airdropStart = dateObjectStart.toUTCString()\n\n      airdropEnd = dateObjectEnd.toUTCString()\n\n      let nfts = await airdropInstance.methods.allNfts().call();\n\n      let maxAirdrop = await airdropInstance.methods.MAX_AIRDROP_TOKENS().call();\n      let maxSale = await airdropInstance.methods.MAX_SALE_TOKENS().call();\n\n      this.setState({ web3, account, networkId, airdropInstance, ipfs, nfts, airdropEnd, airdropStart ,nftsA, nftsS, exampleNfts, price, loading:false })\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Please connect to the right chain.`,\n      );\n      console.error(error)\n\n    }\n  }\n\n  render() {\n    if (!this.state.loading) {\n      return (\n        <Router>\n          <Switch>\n            <div>\n              <Navbar account={this.state.account}/>\n              <Route exact path='/'>\n                  <Main web3={this.state.web3} account={this.state.account} networkId={this.state.networkdId} airdropInstance={this.state.airdropInstance} ipfs={this.state.ipfs} nfts={this.state.nfts} airdropEnd={this.state.airdropEnd} airdropStart={this.state.airdropStart} nftsA={this.state.nftsA} nftsS={this.state.nftsS} price={this.state.price}/>\n              </Route>\n              <Route exact path='/airdrop'>\n                  <Airdrop web3={this.state.web3} account={this.state.account} networkId={this.state.networkdId} airdropInstance={this.state.airdropInstance} ipfs={this.state.ipfs} nfts={this.state.nfts} airdropEnd={this.state.airdropEnd} airdropStart={this.state.airdropStart} nftsA={this.state.nftsA} nftsS={this.state.nftsS} price={this.state.price}/>\n              </Route>\n              <Route exact path='/mynfts'>\n                  <MyNFTs web3={this.state.web3} account={this.state.account} networkId={this.state.networkdId} airdropInstance={this.state.airdropInstance} ipfs={this.state.ipfs} nfts={this.state.nfts} airdropEnd={this.state.airdropEnd} airdropStart={this.state.airdropStart} nftsA={this.state.nftsA} nftsS={this.state.nftsS} price={this.state.price}/>\n              </Route>\n            </div>\n          </Switch>\n        </Router>\n      );      \n    } else {\n        return(<div class=\"loader\"></div>);\n    }\n\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}