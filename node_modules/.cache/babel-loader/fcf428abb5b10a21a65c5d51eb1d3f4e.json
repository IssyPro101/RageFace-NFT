{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/Product DApp/client/src/MyProducts.js\";\nimport React, { Component } from 'react';\nimport Navbar from \"./Navbar.js\";\n\nclass MyProducts extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const account = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        console.log(account[0]); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetworkProduct = ProductBuyContract.networks[networkId];\n        const instance = new web3.eth.Contract(ProductBuyContract.abi, deployedNetworkProduct && deployedNetworkProduct.address);\n        let tokenAddress = await instance.methods.token().call();\n        const deployedNetworkToken = TestToken.networks[networkId];\n        const token = new web3.eth.Contract(TestToken.abi, deployedNetworkToken && deployedNetworkToken.address);\n        let product = deployedNetworkProduct.address;\n        let products = await instance.methods.viewProducts().call();\n        let tokenName = await token.methods.name().call();\n        let tokenSymbol = await token.methods.symbol().call();\n        let statuses = await instance.methods.getProductStatuses().call();\n        console.log(statuses); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          account: account[0],\n          contract: instance,\n          products,\n          token,\n          tokenName,\n          tokenSymbol,\n          product,\n          statuses\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"myProducts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      account: this.state.account,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MyProducts;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/Product DApp/client/src/MyProducts.js"],"names":["React","Component","Navbar","MyProducts","componentDidMount","web3","getWeb3","account","window","ethereum","request","method","console","log","networkId","eth","net","getId","deployedNetworkProduct","ProductBuyContract","networks","instance","Contract","abi","address","tokenAddress","methods","token","call","deployedNetworkToken","TestToken","product","products","viewProducts","tokenName","name","tokenSymbol","symbol","statuses","getProductStatuses","setState","contract","error","alert","render","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAE/BG,iBAF+B,GAEX,YAAY;AAC5B,UAAI;AACF;AACA,cAAMC,IAAI,GAAG,MAAMC,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMC,OAAO,GAAG,MAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAxB,CAAtB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAAC,CAAD,CAAnB,EANE,CAQF;;AACA,cAAMO,SAAS,GAAG,MAAMT,IAAI,CAACU,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,sBAAsB,GAAGC,kBAAkB,CAACC,QAAnB,CAA4BN,SAA5B,CAA/B;AACA,cAAMO,QAAQ,GAAG,IAAIhB,IAAI,CAACU,GAAL,CAASO,QAAb,CACfH,kBAAkB,CAACI,GADJ,EAEfL,sBAAsB,IAAIA,sBAAsB,CAACM,OAFlC,CAAjB;AAKA,YAAIC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiBC,KAAjB,GAAyBC,IAAzB,EAAzB;AAEA,cAAMC,oBAAoB,GAAGC,SAAS,CAACV,QAAV,CAAmBN,SAAnB,CAA7B;AACA,cAAMa,KAAK,GAAG,IAAItB,IAAI,CAACU,GAAL,CAASO,QAAb,CACZQ,SAAS,CAACP,GADE,EAEZM,oBAAoB,IAAIA,oBAAoB,CAACL,OAFjC,CAAd;AAKA,YAAIO,OAAO,GAAGb,sBAAsB,CAACM,OAArC;AAEA,YAAIQ,QAAQ,GAAG,MAAMX,QAAQ,CAACK,OAAT,CAAiBO,YAAjB,GAAgCL,IAAhC,EAArB;AAEA,YAAIM,SAAS,GAAG,MAAMP,KAAK,CAACD,OAAN,CAAcS,IAAd,GAAqBP,IAArB,EAAtB;AAEA,YAAIQ,WAAW,GAAG,MAAMT,KAAK,CAACD,OAAN,CAAcW,MAAd,GAAuBT,IAAvB,EAAxB;AAEA,YAAIU,QAAQ,GAAG,MAAMjB,QAAQ,CAACK,OAAT,CAAiBa,kBAAjB,GAAsCX,IAAtC,EAArB;AACAhB,QAAAA,OAAO,CAACC,GAAR,CAAYyB,QAAZ,EAjCE,CAmCF;AACA;;AACA,aAAKE,QAAL,CAAc;AAAEnC,UAAAA,IAAF;AAAQE,UAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD,CAAxB;AAA6BkC,UAAAA,QAAQ,EAAEpB,QAAvC;AAAiDW,UAAAA,QAAjD;AAA2DL,UAAAA,KAA3D;AAAiEO,UAAAA,SAAjE;AAA4EE,UAAAA,WAA5E;AAAyFL,UAAAA,OAAzF;AAAkGO,UAAAA;AAAlG,SAAd;AAED,OAvCD,CAuCE,OAAOI,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGA/B,QAAAA,OAAO,CAAC8B,KAAR,CAAcA,KAAd;AACD;AACJ,KAjD8B;AAAA;;AAqDjCE,EAAAA,MAAM,GAAG;AACP,WACI;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWtC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKD;;AA3DgC;;AA8DnC,eAAeJ,UAAf","sourcesContent":["import React, { Component } from 'react'\nimport Navbar from \"./Navbar.js\";\n\nclass MyProducts extends Component {\n\n    componentDidMount = async () => {\n        try {\n          // Get network provider and web3 instance.\n          const web3 = await getWeb3();\n    \n          // Use web3 to get the user's accounts.\n          const account = await window.ethereum.request({ method: 'eth_accounts' });\n          console.log(account[0])\n    \n          // Get the contract instance.\n          const networkId = await web3.eth.net.getId();\n          const deployedNetworkProduct = ProductBuyContract.networks[networkId];\n          const instance = new web3.eth.Contract(\n            ProductBuyContract.abi,\n            deployedNetworkProduct && deployedNetworkProduct.address,\n          );\n    \n          let tokenAddress = await instance.methods.token().call();\n    \n          const deployedNetworkToken = TestToken.networks[networkId];\n          const token = new web3.eth.Contract(\n            TestToken.abi,\n            deployedNetworkToken && deployedNetworkToken.address,\n          );\n    \n          let product = deployedNetworkProduct.address;\n    \n          let products = await instance.methods.viewProducts().call();\n    \n          let tokenName = await token.methods.name().call();\n    \n          let tokenSymbol = await token.methods.symbol().call();\n    \n          let statuses = await instance.methods.getProductStatuses().call();\n          console.log(statuses)\n    \n          // Set web3, accounts, and contract to the state, and then proceed with an\n          // example of interacting with the contract's methods.\n          this.setState({ web3, account: account[0], contract: instance, products, token,tokenName, tokenSymbol, product, statuses });\n    \n        } catch (error) {\n          // Catch any errors for any of the above operations.\n          alert(\n            `Failed to load web3, accounts, or contract. Check console for details.`,\n          );\n          console.error(error);\n        }\n    };    \n\n\n\n  render() {\n    return (\n        <div id=\"myProducts\">\n            <Navbar account={this.state.account}/>\n        </div>\n    );\n  }\n}\n\nexport default MyProducts;\n"]},"metadata":{},"sourceType":"module"}