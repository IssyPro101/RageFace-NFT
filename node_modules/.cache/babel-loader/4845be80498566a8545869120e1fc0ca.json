{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst itPeekable = require('it-peekable');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst all = require('it-all');\n\nconst _require = require('./utils'),\n      isBytes = _require.isBytes,\n      isBlob = _require.isBlob,\n      isReadableStream = _require.isReadableStream;\n/**\n * @param {import('./normalise-input').ToContent} input\n */\n\n\nasync function toBlob(input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input]);\n  } // String\n\n\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()]);\n  } // Blob | File\n\n\n  if (isBlob(input)) {\n    return input;\n  } // Browser stream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // (Async)Iterator<?>\n\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n    /** @type {any} value **/\n\n    const _ref = await peekable.peek(),\n          value = _ref.value,\n          done = _ref.done;\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable);\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from((await all(peekable)))]);\n    } // (Async)Iterable<Bytes|String>\n\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n\n  throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\n\n\nasync function itToBlob(stream) {\n  const parts = [];\n\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n\n  return new Blob(parts);\n}\n\nmodule.exports = toBlob;","map":null,"metadata":{},"sourceType":"script"}