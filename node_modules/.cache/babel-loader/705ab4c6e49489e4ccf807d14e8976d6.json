{"ast":null,"code":"var _jsxFileName = \"/Users/israeladelaja/Desktop/Product DApp/client/src/MyProducts.js\";\nimport React, { Component } from \"react\";\nimport ProductBuyContract from \"./contracts/ProductBuy.json\";\nimport TestToken from \"./contracts/TestToken.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass MyProducts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: null,\n      web3: null,\n      account: null,\n      contract: null,\n      token: null,\n      tokenName: null,\n      approved: false,\n      product: null,\n      decimals: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const account = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        console.log(account[0]); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetworkProduct = ProductBuyContract.networks[networkId];\n        const instance = new web3.eth.Contract(ProductBuyContract.abi, deployedNetworkProduct && deployedNetworkProduct.address);\n        let tokenAddress = await instance.methods.token().call();\n        const deployedNetworkToken = TestToken.networks[networkId];\n        const token = new web3.eth.Contract(TestToken.abi, deployedNetworkToken && tokenAddress);\n        let product = deployedNetworkProduct.address;\n        let products = await instance.methods.getBoughtProducts().call({\n          from: accounts[0]\n        });\n        console.log(products);\n        let tokenName = await token.methods.name().call();\n        let tokenSymbol = await token.methods.symbol().call();\n        let decimals = await token.methods.decimals().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          account: account[0],\n          contract: instance,\n          products,\n          token,\n          tokenName,\n          tokenSymbol,\n          product,\n          decimals\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n  }\n\n  render() {\n    let content;\n\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contracts...\");\n    } else if (this.state.products.length === 0) {\n      content = React.createElement(\"h3\", {\n        id: \"no-products\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"You haven't bought any products.\");\n    } else {\n      content = this.state.products.map((product, key) => {\n        return React.createElement(\"div\", {\n          className: \"product\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, product.productName), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"Id: \", product.productId), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"Product Link: \", product.productLink), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"Price: \", product.productPrice / 10 ** this.state.decimals, \" \", this.state.tokenSymbol));\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"My Products\"), React.createElement(\"div\", {\n      id: \"products\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, content));\n  }\n\n}\n\nexport default MyProducts;","map":{"version":3,"sources":["/Users/israeladelaja/Desktop/Product DApp/client/src/MyProducts.js"],"names":["React","Component","ProductBuyContract","TestToken","getWeb3","MyProducts","state","products","web3","account","contract","token","tokenName","approved","product","decimals","componentDidMount","window","ethereum","request","method","console","log","networkId","eth","net","getId","deployedNetworkProduct","networks","instance","Contract","abi","address","tokenAddress","methods","call","deployedNetworkToken","getBoughtProducts","from","accounts","name","tokenSymbol","symbol","setState","error","alert","render","content","length","map","key","productName","productId","productLink","productPrice"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ProductBuyContract from \"./contracts/ProductBuy.json\";\nimport TestToken from \"./contracts/TestToken.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass MyProducts extends Component {\n  state = { products: null, web3: null, account: null, contract: null, token: null, tokenName: null, approved: false, product: null, decimals: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const account = await window.ethereum.request({ method: 'eth_accounts' });\n      console.log(account[0])\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetworkProduct = ProductBuyContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ProductBuyContract.abi,\n        deployedNetworkProduct && deployedNetworkProduct.address,\n      );\n\n      let tokenAddress = await instance.methods.token().call();\n\n      const deployedNetworkToken = TestToken.networks[networkId];\n      const token = new web3.eth.Contract(\n        TestToken.abi,\n        deployedNetworkToken && tokenAddress,\n      );\n\n      let product = deployedNetworkProduct.address;\n\n      let products = await instance.methods.getBoughtProducts().call({from: accounts[0]});\n      console.log(products)\n\n      let tokenName = await token.methods.name().call();\n\n      let tokenSymbol = await token.methods.symbol().call();\n\n      let decimals = await token.methods.decimals().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, account: account[0], contract: instance, products, token,tokenName, tokenSymbol, product, decimals});\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n  \n  render() {\n    let content;\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contracts...</div>;\n    } else if (this.state.products.length === 0) {\n      content = <h3 id=\"no-products\">You haven't bought any products.</h3>\n    } else {\n      content = this.state.products.map((product, key) => {\n        return ( \n            <div className=\"product\">\n              <h2>{product.productName}</h2>\n              <p>Id: {product.productId}</p>\n              <p>Product Link: {product.productLink}</p>\n              <p>Price: {product.productPrice/10**this.state.decimals} {this.state.tokenSymbol}</p>\n            </div>\n        )    \n\n      })\n    }\n    return (\n      <div className=\"App\">\n        <h1>My Products</h1>\n        <div id=\"products\">\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MyProducts;\n"]},"metadata":{},"sourceType":"module"}