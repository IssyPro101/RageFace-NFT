{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst _require = require('multiformats/cid'),\n      CID = _require.CID;\n\nconst _require2 = require('multiaddr'),\n      multiaddr = _require2.multiaddr;\n\nconst globSource = require('ipfs-utils/src/files/glob-source');\n\nconst urlSource = require('ipfs-utils/src/files/url-source');\n\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs');\n\nconst Multihashes = require('ipfs-core-utils/src/multihashes');\n\nconst Multibases = require('ipfs-core-utils/src/multibases');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst dagCbor = require('@ipld/dag-cbor');\n\nconst _require3 = require('multiformats/hashes/identity'),\n      identity = _require3.identity;\n\nconst _require4 = require('multiformats/basics'),\n      bases = _require4.bases,\n      hashes = _require4.hashes,\n      codecs = _require4.codecs;\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\n\n\nfunction create(options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  /** @type {MultibaseCodec[]} */\n\n  const multibaseCodecs = Object.values(bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  /** @type {BlockCodec[]} */\n\n  const blockCodecs = Object.values(codecs);\n  [dagPb, dagCbor, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  /** @type {MultihashHasher[]} */\n\n  const multihashHashers = Object.values(hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  /** @type {IPFSHTTPClient} */\n\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(multicodecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(multicodecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  };\n  return client;\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  globSource,\n  urlSource\n};","map":null,"metadata":{},"sourceType":"script"}