{"ast":null,"code":"'use strict';\n\nconst _require = require('multiaddr'),\n      Multiaddr = _require.Multiaddr;\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst _require2 = require('./response-types'),\n      Provider = _require2.Provider;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function* findProvs(cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const _ref of message.Responses) {\n          const ID = _ref.ID;\n          const Addrs = _ref.Addrs;\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(\n            /** @type {string} **/\n            a => new Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n\n  return findProvs;\n});","map":null,"metadata":{},"sourceType":"script"}